using Maple.Core;
using System;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Threading;

namespace Maple
{
    public class SplashScreenViewModel : ObservableObject, IDisposable
    {
        private readonly IMapleLog _log;
        private readonly BlockingCollection<string> _queue;
        private Task _queueProcessor;
        private CancellationTokenSource _source;
        private readonly TimeSpan _displayDelay;

        private string _version;
        /// <summary>
        /// Gets the version.
        /// </summary>
        /// <value>
        /// The version.
        /// </value>
        public string Version
        {
            get { return _version; }
            private set { SetValue(ref _version, value); }
        }

        private string _message;
        /// <summary>
        /// Gets the message.
        /// </summary>
        /// <value>
        /// The message.
        /// </value>
        /// <autogeneratedoc />
        public string Message
        {
            get { return _message; }
            private set { SetValue(ref _message, value); }
        }

        public bool IsDisposed { get; private set; }
        public bool IsDisposing { get; private set; }

        public bool IsLoaded { get; private set; }
        public bool IsLoading { get; private set; }

        public ICommand LoadCommand { get; private set; }
        public ICommand DisposeCommand { get; private set; }

        public SplashScreenViewModel(IMapleLog log)
        {
            _log = log ?? throw new ArgumentNullException(nameof(log));
            _queue = new BlockingCollection<string>();
            _displayDelay = TimeSpan.FromMilliseconds(100);

            InitializeCommands();
        }

        private void InitializeCommands()
        {
            LoadCommand = new RelayCommand(Load, CanLoad);
            DisposeCommand = new RelayCommand(Dispose, CanDispose);
        }

        public void Load()
        {
            IsLoaded = false;
            IsLoading = true;

            _log.LogMessageReceived += LogMessageReceived;
            _source = new CancellationTokenSource();
            _queueProcessor = Task.Run(() => ProcessQueue(), _source.Token);

            IsLoading = false;
            IsLoaded = true;
        }

        private bool CanLoad()
        {
            return !IsDisposed
                && !IsDisposing
                && !IsLoaded
                && !IsLoading;
        }

        private void LogMessageReceived(object sender, LogMessageReceivedEventEventArgs e)
        {
            _queue.Add(e.Message);
        }

        private void ProcessQueue()
        {
            var dispatcher = DispatcherFactory.GetDispatcher();
            while (!_source.IsCancellationRequested)
            {
                var message = _queue.Take(_source.Token);
                //dispatcher.Invoke(() => Message = message, DispatcherPriority.Send);
                Message = message;
                Debug.WriteLine(message);
                //await Task.Delay(_displayDelay, _source.Token);
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (IsDisposed)
                return;

            if (disposing)
            {
                IsDisposing = false;
                IsDisposing = true;

                _log.LogMessageReceived -= LogMessageReceived;
                _source?.Cancel();
                _queueProcessor?.Wait();
                // Free any other managed objects here.
            }

            // Free any unmanaged objects here.
            IsDisposed = true;
            IsDisposing = false;
        }

        public bool CanDispose()
        {
            return !IsDisposed
                && !IsDisposing
                && IsLoaded
                && IsLoading;
        }
    }
}
