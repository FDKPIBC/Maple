<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:icons="clr-namespace:MahApps.Metro.IconPacks;assembly=MahApps.Metro.IconPacks"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls">

    <!--  Remember: the order of these styles matters, since they depend on each other. If one references a style not yet declared, you get random RuntimeErrors  -->

    <ControlTemplate x:Key="BusyTemplate">
        <materialDesign:TransitioningContent>
            <materialDesign:TransitioningContent.OpeningEffects>
                <materialDesign:TransitionEffect Kind="FadeIn" />
            </materialDesign:TransitioningContent.OpeningEffects>
            <Grid>
                <ProgressBar HorizontalAlignment="Center"
                             VerticalAlignment="Center"
                             IsIndeterminate="True"
                             Style="{StaticResource MaterialDesignCircularProgressBar}"
                             Value="0" />
            </Grid>
        </materialDesign:TransitioningContent>
    </ControlTemplate>

    <!--  Icon Styles  -->
    <Style x:Key="BigIconStyle" TargetType="icons:PackIconMaterial">
        <Setter Property="Height" Value="24" />
        <Setter Property="Width" Value="24" />
    </Style>

    <Style x:Key="IconStyle" TargetType="icons:PackIconMaterial">
        <Setter Property="Height" Value="20" />
        <Setter Property="Width" Value="20" />
    </Style>

    <Style x:Key="MiniIconStyle" TargetType="icons:PackIconMaterial">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
    </Style>

    <Style x:Key="BaseLayoutStyle" TargetType="Control">
        <Setter Property="Margin" Value="10" />
    </Style>

    <Style x:Key="BaseRowDefinitionStyle" TargetType="RowDefinition">
        <Setter Property="Height" Value="10" />
    </Style>

    <Style x:Key="BaseColumnDefinitionStyle" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="10" />
    </Style>

    <!--  DataGridRow Styles  -->
    <Style x:Key="BaseDataGridRowStyle"
           BasedOn="{StaticResource {x:Type DataGridRow}}"
           TargetType="{x:Type DataGridRow}">
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
    </Style>

    <!--  DataGrid Styles  -->
    <Style x:Key="BaseDataGridStyle"
           BasedOn="{StaticResource {x:Type DataGrid}}"
           TargetType="{x:Type DataGrid}">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="True" />
        <Setter Property="CanUserReorderColumns" Value="True" />
        <Setter Property="CanUserResizeColumns" Value="True" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="CanUserSortColumns" Value="True" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="RowStyle" Value="{StaticResource BaseDataGridRowStyle}" />
    </Style>

    <!--  Window Styles  -->
    <Style x:Key="BaseWindowStyle"
           BasedOn="{StaticResource {x:Type metro:MetroWindow}}"
           TargetType="{x:Type metro:MetroWindow}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesignFont}" />
        <Setter Property="Height" Value=" 506" />
        <Setter Property="MinHeight" Value="506" />
        <Setter Property="MinWidth" Value="900" />

        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="TextElement.FontSize" Value="13" />
        <Setter Property="TextElement.FontWeight" Value="Regular" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="Width" Value="900" />

        <Setter Property="GlowBrush" Value="Black" />
        <Setter Property="TitleCaps" Value="False" />
        <Setter Property="FontFamily" Value="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto" />
        <Setter Property="SaveWindowPosition" Value="True" />
    </Style>

    <!--  Button Styles  -->
    <Style x:Key="BaseButtonStyle"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}">
        <Setter Property="Height" Value="33.75" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="MinWidth" Value="60" />
    </Style>

    <Style x:Key="BaseDataGridButtonStyle"
           BasedOn="{StaticResource MaterialDesignMultiFloatingActionAccentPopupBox}"
           TargetType="{x:Type materialDesign:PopupBox}">
        <Setter Property="Margin" Value="0,-30,10,0" />
        <Setter Property="Panel.ZIndex" Value="2" />
        <Setter Property="PlacementMode" Value="LeftAndAlignMiddles" />
        <Setter Property="ToolTipService.Placement" Value="Mouse" />
    </Style>

    <Style x:Key="OptionsButtonStyle"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Settings" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="30" />
    </Style>

    <Style x:Key="ComputeButtonStyle"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Magnify" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CancelButtonStyle"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Close" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AddButtonStyle"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Plus" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MiniAddButtonStyle"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Plus" Style="{Binding MiniIconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MiniDeleteButtonStyle"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Delete" Style="{Binding MiniIconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeleteButtonStyle"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Delete" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PlayButtonStyle"
           BasedOn="{StaticResource MaterialDesignFloatingActionButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="4" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Play" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding MediaPlayer.IsPlaying, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <icons:PackIconMaterial Kind="Stop" Style="{Binding IconStyle}" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PauseButtonStyle"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="Pause" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PreviousButtonStyle"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="SkipPrevious" Style="{Binding MiniIconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NextButtonStyle"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}"
           TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <icons:PackIconMaterial Kind="SkipNext" Style="{Binding MiniIconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ToggleButton Styles  -->
    <ControlTemplate x:Key="IsMediaPlayerSilentTemplate">
        <icons:PackIconMaterial Kind="SpeakerOff" Style="{Binding IconStyle}" />
    </ControlTemplate>

    <ControlTemplate x:Key="IsMediaPlayerNotSilentTemplate">
        <icons:PackIconMaterial Kind="Speaker" Style="{Binding IconStyle}" />
    </ControlTemplate>

    <Style x:Key="MutedPlayerToggleButtonStyle" TargetType="{x:Type ContentControl}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Silent}" Value="True">
                <Setter Property="Template" Value="{StaticResource IsMediaPlayerSilentTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Silent}" Value="False">
                <Setter Property="Template" Value="{StaticResource IsMediaPlayerNotSilentTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="IsRestrictedMediaItemTemplate">
        <icons:PackIconMaterial Kind="BlockHelper" Style="{StaticResource IconStyle}" />
    </ControlTemplate>

    <ControlTemplate x:Key="IsNotRestrictedMediaItemTemplate">
        <icons:PackIconMaterial Kind="Check" Style="{StaticResource IconStyle}" />
    </ControlTemplate>

    <Style x:Key="RestrictedMediaItemStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsRestricted}" Value="False">
                <Setter Property="Template" Value="{StaticResource IsNotRestrictedMediaItemTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsRestricted}" Value="True">
                <Setter Property="Template" Value="{StaticResource IsNotRestrictedMediaItemTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>