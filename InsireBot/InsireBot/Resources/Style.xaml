<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" >

    <!-- Remember: the order of these styles matters, since they depend on each other. If one references a style not yet declared, you get random RuntimeErrors-->

    <!-- Icon Styles -->
    <Style x:Key="BigIconStyle" TargetType="{x:Type materialDesign:PackIcon}" >
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="IconStyle" TargetType="{x:Type materialDesign:PackIcon}" >
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
    </Style>

    <Style x:Key="MiniIconStyle" TargetType="{x:Type materialDesign:PackIcon}" >
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
    </Style>

    <Style x:Key="BaseLayoutStyle" TargetType="Control">
        <Setter Property="Margin" Value="10" />
    </Style>

    <Style x:Key="BaseRowDefinitionStyle" TargetType="{x:Type RowDefinition}">
        <Setter Property="Height" Value="10" />
    </Style>

    <Style x:Key="BaseColumnDefinitionStyle" TargetType="{x:Type ColumnDefinition}">
        <Setter Property="Width" Value="10" />
    </Style>

    <!-- DataGridRow Styles-->
    <Style x:Key="BaseDataGridRowStyle" TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
    </Style>

    <!-- DataGrid Styles -->
    <Style x:Key="BaseDataGridStyle" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="True" />
        <Setter Property="CanUserReorderColumns" Value="True" />
        <Setter Property="CanUserResizeColumns" Value="True" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="CanUserSortColumns" Value="True" />
        <Setter Property="RowStyle" Value="{StaticResource BaseDataGridRowStyle}" />
    </Style>

    <!-- Window Styles -->
    <Style x:Key="BaseWindowStyle" TargetType="{x:Type Window}" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="Width" Value="900" />
        <Setter Property="MinWidth" Value="900" />
        <Setter Property="Height" Value=" 506" />
        <Setter Property="MinHeight" Value="506" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesignFont}" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="TextElement.FontWeight" Value="Regular" />
        <Setter Property="TextElement.FontSize" Value="13" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="WindowStyle" Value="SingleBorderWindow" />
    </Style>

    <Style x:Key="BaseDialogWindowStyle" TargetType="{x:Type Window}" BasedOn="{StaticResource BaseWindowStyle}">
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <!--<Setter Property="WindowStartupLocation" Value="CenterOwner" /> cant be set inside a resource dictionary since the property isnt a dependency property-->
    </Style>

    <!-- Button Styles -->
    <Style x:Key="BaseButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MinWidth" Value="60" />
        <Setter Property="Height" Value="33.75" />
        <Setter Property="Margin" Value="2" />
    </Style>

    <Style x:Key="BaseDataGridButtonStyle" TargetType="{x:Type materialDesign:PopupBox}" BasedOn="{StaticResource MaterialDesignMultiFloatingActionAccentPopupBox}">
        <Setter Property="Margin" Value="0,-30,10,0"/>
        <Setter Property="Panel.ZIndex" Value="2" />
        <Setter Property="PlacementMode" Value="LeftAndAlignMiddles" />
        <Setter Property="ToolTipService.Placement" Value="Mouse" />
    </Style>

    <Style x:Key="ComputeButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="Magnify" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CancelButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="Close" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AddButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="Plus" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MiniAddButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="Plus" Style="{Binding MiniIconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MiniDeleteButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="Delete" Style="{Binding MiniIconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeleteButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="Delete" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PlayButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="Play" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding MediaPlayer.IsPlaying, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <materialDesign:PackIcon Kind="Stop" Style="{Binding IconStyle}" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PauseButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="Pause" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PreviousButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="SkipPrevious" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NextButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <materialDesign:PackIcon Kind="SkipNext" Style="{Binding IconStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToggleButton Styles -->
    <ControlTemplate x:Key="IsMediaPlayerSilentTemplate">
        <materialDesign:PackIcon Kind="SpeakerOff" Style="{Binding IconStyle}" />
    </ControlTemplate>

    <ControlTemplate x:Key="IsMediaPlayerNotSilentTemplate">
        <materialDesign:PackIcon Kind="Speaker" Style="{Binding IconStyle}" />
    </ControlTemplate>

    <Style x:Key="MutedPlayerToggleButtonStyle" TargetType="{x:Type ContentControl}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Silent}" Value="True">
                <Setter Property="Template" Value="{StaticResource IsMediaPlayerSilentTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Silent}" Value="False">
                <Setter Property="Template" Value="{StaticResource IsMediaPlayerNotSilentTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="IsRestrictedMediaItemTemplate">
        <materialDesign:PackIcon Kind="BlockHelper" Style="{StaticResource IconStyle}" />
    </ControlTemplate>

    <ControlTemplate x:Key="IsNotRestrictedMediaItemTemplate">
        <materialDesign:PackIcon Kind="Check" Style="{StaticResource IconStyle}" />
    </ControlTemplate>

    <Style x:Key="RestrictedMediaItemStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsRestricted}" Value="False">
                <Setter Property="Template" Value="{StaticResource IsNotRestrictedMediaItemTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsRestricted}" Value="True">
                <Setter Property="Template" Value="{StaticResource IsNotRestrictedMediaItemTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>